@model Umbrella.Models.ModifyCUserModel
@{
    List<InstaTransfer.DataAccess.AspNetRole> roles = ViewBag.Roles;
}

<div class="nicescroll">
    <div class="col-xs-12">
        <button type="button" class="close right-bar-toggle  pull-right" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 id="rightsidebar-title">
            Detalles del Usuario
        </h4>
    </div>
    <div class="col-md-12">
        @if (Model.Status.Id == 1)
        {
            <div class="alert alert-success">
                <strong><i class="fa fa-check"></i></strong>
                @Model.Status.Description.ToString().Trim()
            </div>
        }
        @if (Model.Status.Id == 2)
        {
            <div class="alert alert-danger">
                <strong><i class="fa fa-close"></i></strong>
                @Model.Status.Description.ToString().Trim()
            </div>
        }
        <hr />
    </div>

    <div id="rightsidebar-body" class="col-xs-12">
        <form id="userform" method="post" action="@Url.Action("CreateCUser", "CUser")" novalidate class="text-left" data_parsley_validate="">

            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.id)
            <div class="form-group">
                <label class="control-label">Correo Electrónico</label>
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @readonly = "" })
            </div>
            <div class="form-group">
                <label class="control-label">Nombre</label>
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", required = "", data_parsley_maxlength = "30", data_parsley_trigger = "input change autocompletechange focusin focusout" })
            </div>
            <div class="form-group">
                <label class="control-label">Apellido</label>
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = "", data_parsley_maxlength = "30", data_parsley_trigger = "input change autocompletechange focusin focusout" })
            </div>
            <div class="form-group">
                <label class="control-label">Rol</label>
                @foreach (var role in roles)
                {
                    <div class="radio radio-primary">
                        <input type="radio" name="role" id="radio-@role.Name" value=@role.Id @(role.Id == Model.RoleId ? "checked" : "")>
                        <label for="radio-@role.Name">@role.DisplayName</label>
                    </div>
                }
            </div>
            <p>
                <label class="control-label">Usuario de Prueba</label>
                <span class="m-l-15">
                    <input id="testmodeswitch" class="js-switch-side" type="checkbox" @(Model.TestMode ? "checked" : "") data-color="#00b19d" data-size="small" />
                </span>
            </p>
            <p>
                <label class="control-label">Usuario de Contacto</label>
                <span class="m-l-15">
                    <input id="iscontactswitch" class="js-switch-side" type="checkbox" @(Model.IsContact ? "checked" : "") data-color="#00b19d" data-size="small" />
                </span>
            </p>
            <div class="form-group text-center m-b-0">
                <button id="edituserfomsubmit" class="col-sm-12 btn btn-primary waves-effect waves-light" type="button" disabled>
                    Guardar
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Parsley JS -->
<script type="text/javascript" src="~/plugins/parsleyjs/dist/parsley.min.js"></script>
<script src="~/plugins/parsleyjs/dist/i18n/es.js"></script>

<script type="text/javascript">

    function modifyUser() {
        swal({
            title: "¿Seguro desea modificar este usuario?",
            text: "No podrá revertir esta operación",
            type: "info",
            showCancelButton: true,
            cancelButtonText: "Cancelar",
            confirmButtonText: "Si, modificar usuario",
            closeOnConfirm: false
        }, function () {
            ShowLoader();
            Pace.start();
            $.ajax({
                method: "POST",
                url: '@Url.Action("ModifyCUser", "CUser")',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').attr('value'),
                    id: $("#id").val(),
                    Name: $("#Name").val(),
                    LastName: $('#LastName').val(),
                    TestMode: $("#testmodeswitch").prop("checked"),
                    IsContact: $("#iscontactswitch").prop("checked"),
                    RoleId: $("input[name='role']:checked").val()
                }
            })
    .done(function (r) {
        HideLoader();
        Pace.stop();
        if (r.success) {
            swal({
                title: "Exito!",
                text: r.message,
                type: "success",
            }, function () {
                location.reload();
            });
        } else {
            swal("Error!", r.message, "error");
        }
    });
        });
        HideLoader();
    }

    $(document).ready(function () {

        var form = $('form');

        // Parsley
        var formInstance = form.parsley();

        // Switchery
        var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch-side'));

        elems.forEach(function (html) {
            var switchery = new Switchery(html, { size: 'small', color: '#3DDCF7', disabled: true });
            switchery.disable();
        });

        // Activar boton submit
        $(":input").on("keyup change autocompletechange autocomplete input", function () {
            if (formInstance.isValid()) {
                $('#edituserfomsubmit').prop('disabled', false);
            } else {
                $('#edituserfomsubmit').prop('disabled', 'disabled');
            }
        });

        // Submit
        $('#edituserfomsubmit').on('click', function () {
            checkSession(modifyUser);
        });

    });
</script>
@model Umbrella.Models.RegisterViewModel
@{
    List<InstaTransfer.DataAccess.AspNetRole> roles = ViewBag.Roles;
}

<div class="nicescroll">
    @*<div class="col-xs-12">
        <button type="button" class="close right-bar-toggle  pull-right" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 id="rightsidebar-title">
            Agregar usuario
        </h4>
    </div>*@
    <div id="rightsidebar-body" class="col-xs-12">
        <form id="userform" method="post" action="@Url.Action("CreateCUser", "CUser")" novalidate class="text-left" data_parsley_validate="">

            @Html.AntiForgeryToken()

            <div class="form-group">
                <label class="control-label">Nombre</label>
                @Html.TextBoxFor(m => m.commerceUserModel.Name, new { @class = "form-control", required = "" })
                @Html.ValidationMessageFor(m => m.commerceUserModel.Name, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label class="control-label">Apellido</label>
                @Html.TextBoxFor(m => m.commerceUserModel.LastName, new { @class = "form-control", required = ""})
                @Html.ValidationMessageFor(m => m.commerceUserModel.LastName, null, new { @class = "text-danger"})
            </div>
            <div class="form-group">
                <label class="control-label">Correo electrónico</label>
                @Html.TextBoxFor(m => m.Email, new
           {
               @class = "form-control",
               type="email",
               required = ""
               

           })
                @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label class="control-label">Contraseña</label>
                @Html.PasswordFor(m => m.Password, new
           {
               @class = "form-control",
               required = "",
               type="password"
           })
                @Html.ValidationMessageFor(m => m.Password, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label class="control-label">Confirmar Contraseña</label>
                @Html.PasswordFor(m => m.ConfirmPassword, new
           {
               @class = "form-control",
               required = "",
               type = "password"
           })
                @Html.ValidationMessageFor(m => m.ConfirmPassword, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label class="control-label">Rol</label>
                @foreach (var role in roles)
                {

                    <div class="radio radio-primary">
                        <input type="radio" name="commerceUserModel.Role" id="radio-@role.Name" value=@role.Id checked>
                        <label for="radio-@role.Name">
                            @role.DisplayName
                        </label>
                    </div>
                }
            </div>
            <p class="">
                <label class="control-label">Usuario de Prueba</label>
                <span class="m-l-15">
                    <input id="testmodeswitch" type="checkbox" class="js-switch-side" checked data-color="#00b19d" data-size="small" />
                </span>
            </p>
            <div class="form-group text-center m-b-0">
                <button id="userfomsubmit" class="col-sm-12 btn btn-primary waves-effect waves-light" type="submit">
                    Agregar
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Parsley JS -->
<script type="text/javascript" src="~/plugins/parsleyjs/dist/parsley.min.js"></script>
<script src="~/plugins/parsleyjs/dist/i18n/es.js"></script>

<script type="text/javascript">

    function createUser(){
        swal({
            title: "¿Seguro desea agregar este usuario?",
            text: "No podrá revertir esta operación",
            type: "info",
            showCancelButton: true,
            cancelButtonText: "Cancelar",
            confirmButtonText: "Si, agregar usuario",
            closeOnConfirm: false
        }, function () {
            ShowLoader();
            $.ajax({
                method: "POST",
                url: '@Url.Action("CreateCUser", "CUser")',
                data: $("#userform").serialize()
            })
    .done(function (r) {
        HideLoader();
        if (r.success) {
            swal({
                title: "Exito!",
                text: r.message,
                type: "success",
            }, function () {
                location.reload();
            });
        } else {
            swal("Error!", r.message, "error");
        }
    });
        });
        HideLoader();
    }

    $(document).ready(function () {

        var form = $('form');

        // Parsley
        var formInstance = form.parsley();

        // Garlic
        form.garlic();

        $(window).bind('beforeunload', function () {
            form.garlic('destroy');
        });

        //// Activar boton submit
        //$(":input").on("keyup change autocompletechange autocomplete input", function () {
        //    if (formInstance.isValid()) {
        //        $('#userfomsubmit').prop('disabled', false);
        //    } else {
        //        $('#userfomsubmit').prop('disabled', 'disabled');
        //    }
        //});

        // Switchery
        var sideuserswitchery = Array.prototype.slice.call(document.querySelectorAll('input[data-plugin="profilepanelswitch"]'));
        sideuserswitchery.forEach(function (html) {
            var switchery = new Switchery(html, { size: 'small', color: '#00b19d' });
        });

        // Submit
        $('#userform').on('submit', function () {
            checkSession(createUser);
        });

    });
</script>
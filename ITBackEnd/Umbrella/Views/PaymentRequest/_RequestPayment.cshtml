@model InstaTransfer.BLL.Models.PaymentRequest.PaymentRequestModel

<div class="col-xs-12">

    <h4 id="rightsidebar-title">
        Solicitar Pago
    </h4>
</div>
<div id="rightsidebar-body" class="col-xs-12">
    <div class="row">
        <div class="col-md-12">
            <form id="requestPaymentForm" method="post" novalidate class="text-left" data-parsley-validate="">

                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label class="control-label p-t-10 ">Cédula</label>
                    @Html.TextBoxFor(m => m.UserCI, new { @class = "form-control", data_parsley_required = "", data_parsley_type = "digits", data_parsley_range = "[99999, 99999999]", data_parsley_trigger = "input change autocompletechange focusin focusout" })
                </div>
                <div class="form-group">
                    <label class="control-label p-t-10">Nombre</label>
                    @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", data_parsley_required = "", data_parsley_maxlength = "50", data_parsley_trigger = "input change autocompletechange focusin focusout" })
                </div>
                <div class="form-group">
                    <label class="control-label p-t-10">Apellido</label>
                    @Html.TextBoxFor(m => m.UserLastName, new { @class = "form-control", data_parsley_required = "", data_parsley_maxlength = "50", data_parsley_trigger = "input change autocompletechange focusin focusout" })
                </div>
                <div class="form-group">
                    <label class="control-label p-t-10">Email de Contacto</label>
                    @Html.TextBoxFor(m => m.RequestEmail, new { @class = "form-control", data_parsley_required = "", data_parsley_trigger = "input change autocompletechange focusin focusout", type = "email", data_parsley_maxlength = "50" })
                </div>
                <div class="form-group">
                    <label class="control-label p-t-10">Teléfono de Contacto</label>
                    @Html.TextBoxFor(m => m.UserPhone, new { @class = "form-control", @id = "phone", type = "", data_parsley_required = "", data_parsley_trigger = "input change autocompletechange focusin focusout", data_parsley_maxlength = "30", data_parsley_intl_tel_no = "" })
                </div>
                <div class="form-group">
                    <label class="control-label p-t-10">Monto</label>
                    @Html.TextBoxFor(m => m.Amount, new { @class = "form-control", data_parsley_required = "", data_parsley_trigger = "input change autocompletechange focusin focusout", data_parsley_gte = "0.00" })
                </div>
                <div class="form-group">
                    <label class="control-label p-t-10">Descripción</label>
                    @Html.TextBoxFor(m => m.Description, new { @class = "form-control", data_parsley_required = "", data_parsley_trigger = "input change autocompletechange autocomplete focusin focusout", data_parsley_maxlength = "100" })
                </div>
                <div class="form-group">
                    <div class="form-control-static p-t-10">
                        <button id="submitRequest" class="col-sm-12 btn btn-primary waves-effect waves-light btn-submitRequest" style="margin-bottom:10px;" type="button" disabled="disabled">
                            Enviar Solicitud
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Parsley JS -->
<script src="~/plugins/parsleyjs/dist/parsley.min.js"></script>
<script src="~/plugins/parsleyjs/dist/i18n/es.js"></script>

<script type="text/javascript">

    function submitRequest() {
        swal({
            title: "¿Seguro desea realizar la solicitud?",
            text: "No podrá revertir esta operación",
            type: "info",
            showCancelButton: true,
            cancelButtonText: "Cancelar",
            confirmButtonText: "Si, solicitar el pago",
            closeOnConfirm: false
        }, function () {
            ShowLoader();
            Pace.start();
            $.ajax({
                method: "POST",
                url: '@Url.Action("CreatePaymentRequest", "PaymentRequest")',
                data: $("#requestPaymentForm").serialize()
            }).done(function (r) {
                HideLoader();
                Pace.stop();
                if (r.success) {
                    swal({
                        title: "Exito!",
                        text: r.message,
                        type: "success",
                    }, function () {
                        location.reload();
                    });
                } else {
                    swal("Error!", r.message, "error");
                }
            });
        });
        HideLoader();
    }

    $(document).ready(function () {
        var form = $('#requestPaymentForm');
        var minRequest = 10;

        // Garlic
        form.garlic();

        $(window).bind('beforeunload', function () {
            form.garlic('destroy');
        });

        //Bootstrap-TouchSpin
        $("input[name='Amount']").TouchSpin({
            initval: minRequest,
            min: minRequest,
            max: 100000000000000000000,
            step: 10,
            forcestepdivisibility: "none",
            stepinterval: 50,
            decimals: 2,
            buttondown_class: "btn btn-primary",
            buttonup_class: "btn btn-primary",
            maxboostedstep: 10000000,
            prefix: 'Bs.'
        });

        // International Telephone Input
        var telInput = $("#phone");

        // initialise plugin
        telInput.intlTelInput({
            nationalMode: true,
            onlyCountries: ["ve"],
            initialCountry: "ve",
            formatOnDisplay: false,
            allowDropdown: false,
            utilsScript: "@Url.Content("~/Content/js/utils.js")"
        });

        // Parsley
        var formInstance = $('#requestPaymentForm').parsley();

        window.Parsley.addValidator('intlTelNo', {
            requirementType: 'integer',
            validateNumber: (val, requirement, options) => {
                return $(options.element).intlTelInput("isValidNumber");
            },
            messages: {
                es: 'Número de teléfono inválido.'
            }
        });

        // Activar boton submit
        $(":input").on("keyup change autocompletechange autocomplete input", function () {
            if (formInstance.isValid()) {
                $('#submitRequest').prop('disabled', false);
            } else {
                $('#submitRequest').prop('disabled', 'disabled');
            }
        });

        // Submit
        $('#submitRequest').on('click', function () {
            checkSession(submitRequest);
        });

    });
</script>
